in_source_text: |-
  section .text
      mov %rax *index                             ; записывает в регистр rax значение, которое лежит по адресу index(длину строки)
      .loop: add buf1[1] #var1 *index     ; устанавливается метка
                                                  ; затем складывается второе значение из массива buf1 с длиной строки name
                                                  ; дальше добавляется значение переменной var1
                                                  ; и добавляется значение, которое лежит по адресу index
                                                  ; сохраняет получившийся результат во вторую ячейку массива buf1
      movo !1 *index                              ; выводит букву на которую указывает index
      add #index 1                                ; добавляет к переменной единицу index и сохраняет ответ в index
      sub #var2 1                                 ; вычитает из переменной var2 единицу и сохраняет ответ в var2
      jnz .loop                                   ; если не установлен флаг Z, то перейти по метке loop
      hlt                                         ; конец программы
in_source_data: |-
  section .data
      var1: -10                                   ; создается переменная var1 со значением -10
      var2: 5                                     ; создается переменная var2 со значением 5
      buf1: buf 20 2                              ; создается массив длины 20 каждая ячейка которого заполняется значением 2
      name: "Hello"                               ; создается массив первый элемент это длина строки, а дальше идут коды символов
      index: name                                 ; создается ссылка на адрес начала массива name
in_stdin: |

out_code: |
  0 0a10000000040000001e mov %rax *30
  1 01200000005200000002 add #5 #2
  2 0120000000540000001e add #5 *30
  3 0c30000000140000001e movo !1 *30
  4 0120000001e000000001 add #30 1
  5 02200000003000000001 sub #3 1
  6 0f000000001000000000 jnz 1
  7 15000000000000000000 hlt
out_data: |
  0 0000000001f000000000 31
  1 00000000000000000000 0
  2 000fffffff6000000000 -10
  3 00000000005000000000 5
  4 00000000002000000000 2
  5 00000000002000000000 2
  6 00000000002000000000 2
  7 00000000002000000000 2
  8 00000000002000000000 2
  9 00000000002000000000 2
  10 00000000002000000000 2
  11 00000000002000000000 2
  12 00000000002000000000 2
  13 00000000002000000000 2
  14 00000000002000000000 2
  15 00000000002000000000 2
  16 00000000002000000000 2
  17 00000000002000000000 2
  18 00000000002000000000 2
  19 00000000002000000000 2
  20 00000000002000000000 2
  21 00000000002000000000 2
  22 00000000002000000000 2
  23 00000000002000000000 2
  24 00000000048000000000 72
  25 00000000065000000000 101
  26 0000000006c000000000 108
  27 0000000006c000000000 108
  28 0000000006f000000000 111
  29 00000000000000000000 0
  30 00000000018000000000 24

out_stdout: |
  source LoC: 14 code instr: 8
  ============================================================
  Hello
  instr_counter:  31 ticks: 103
out_log: |
  INFO    machine:command_cycle Tick: 0 | Registers: rax: 0, rbx: 0, rdx: 0, rip: 0, rst: 0, rsp: 2047 Flags: N: 0 Z: 1 OF: 0 | Instruction: nop
  INFO    machine:command_cycle Tick: 2 | Registers: rax: 72, rbx: 0, rdx: 0, rip: 1, rst: 0, rsp: 2047 Flags: N: 0 Z: 0 OF: 0 | Instruction: mov %rax *30
  INFO    machine:command_cycle Tick: 6 | Registers: rax: 72, rbx: 0, rdx: 0, rip: 2, rst: 0, rsp: 2047 Flags: N: 1 Z: 0 OF: 0 | Instruction: add #5 #2
  INFO    machine:command_cycle Tick: 10 | Registers: rax: 72, rbx: 0, rdx: 0, rip: 3, rst: 0, rsp: 2047 Flags: N: 0 Z: 0 OF: 0 | Instruction: add #5 *30
  INFO    machine:wr_port       OUTPUT: [] <- H
  INFO    machine:command_cycle Tick: 12 | Registers: rax: 72, rbx: 0, rdx: 0, rip: 4, rst: 0, rsp: 2047 Flags: N: 0 Z: 0 OF: 0 | Instruction: movo !1 *30
  INFO    machine:command_cycle Tick: 16 | Registers: rax: 72, rbx: 0, rdx: 0, rip: 5, rst: 0, rsp: 2047 Flags: N: 0 Z: 0 OF: 0 | Instruction: add #30 1
  INFO    machine:command_cycle Tick: 20 | Registers: rax: 72, rbx: 0, rdx: 0, rip: 6, rst: 0, rsp: 2047 Flags: N: 0 Z: 0 OF: 0 | Instruction: sub #3 1
  INFO    machine:command_cycle Tick: 22 | Registers: rax: 72, rbx: 0, rdx: 0, rip: 1, rst: 0, rsp: 2047 Flags: N: 0 Z: 0 OF: 0 | Instruction: jnz 1
  INFO    machine:command_cycle Tick: 26 | Registers: rax: 72, rbx: 0, rdx: 0, rip: 2, rst: 0, rsp: 2047 Flags: N: 0 Z: 0 OF: 0 | Instruction: add #5 #2
  INFO    machine:command_cycle Tick: 30 | Registers: rax: 72, rbx: 0, rdx: 0, rip: 3, rst: 0, rsp: 2047 Flags: N: 0 Z: 0 OF: 0 | Instruction: add #5 *30
  INFO    machine:wr_port       OUTPUT: ['H'] <- e
  INFO    machine:command_cycle Tick: 32 | Registers: rax: 72, rbx: 0, rdx: 0, rip: 4, rst: 0, rsp: 2047 Flags: N: 0 Z: 0 OF: 0 | Instruction: movo !1 *30
  INFO    machine:command_cycle Tick: 36 | Registers: rax: 72, rbx: 0, rdx: 0, rip: 5, rst: 0, rsp: 2047 Flags: N: 0 Z: 0 OF: 0 | Instruction: add #30 1
  INFO    machine:command_cycle Tick: 40 | Registers: rax: 72, rbx: 0, rdx: 0, rip: 6, rst: 0, rsp: 2047 Flags: N: 0 Z: 0 OF: 0 | Instruction: sub #3 1
  INFO    machine:command_cycle Tick: 42 | Registers: rax: 72, rbx: 0, rdx: 0, rip: 1, rst: 0, rsp: 2047 Flags: N: 0 Z: 0 OF: 0 | Instruction: jnz 1
  INFO    machine:command_cycle Tick: 46 | Registers: rax: 72, rbx: 0, rdx: 0, rip: 2, rst: 0, rsp: 2047 Flags: N: 0 Z: 0 OF: 0 | Instruction: add #5 #2
  INFO    machine:command_cycle Tick: 50 | Registers: rax: 72, rbx: 0, rdx: 0, rip: 3, rst: 0, rsp: 2047 Flags: N: 0 Z: 0 OF: 0 | Instruction: add #5 *30
  INFO    machine:wr_port       OUTPUT: ['H', 'e'] <- l
  INFO    machine:command_cycle Tick: 52 | Registers: rax: 72, rbx: 0, rdx: 0, rip: 4, rst: 0, rsp: 2047 Flags: N: 0 Z: 0 OF: 0 | Instruction: movo !1 *30
  INFO    machine:command_cycle Tick: 56 | Registers: rax: 72, rbx: 0, rdx: 0, rip: 5, rst: 0, rsp: 2047 Flags: N: 0 Z: 0 OF: 0 | Instruction: add #30 1
  INFO    machine:command_cycle Tick: 60 | Registers: rax: 72, rbx: 0, rdx: 0, rip: 6, rst: 0, rsp: 2047 Flags: N: 0 Z: 0 OF: 0 | Instruction: sub #3 1
  INFO    machine:command_cycle Tick: 62 | Registers: rax: 72, rbx: 0, rdx: 0, rip: 1, rst: 0, rsp: 2047 Flags: N: 0 Z: 0 OF: 0 | Instruction: jnz 1
  INFO    machine:command_cycle Tick: 66 | Registers: rax: 72, rbx: 0, rdx: 0, rip: 2, rst: 0, rsp: 2047 Flags: N: 0 Z: 0 OF: 0 | Instruction: add #5 #2
  INFO    machine:command_cycle Tick: 70 | Registers: rax: 72, rbx: 0, rdx: 0, rip: 3, rst: 0, rsp: 2047 Flags: N: 0 Z: 0 OF: 0 | Instruction: add #5 *30
  INFO    machine:wr_port       OUTPUT: ['H', 'e', 'l'] <- l
  INFO    machine:command_cycle Tick: 72 | Registers: rax: 72, rbx: 0, rdx: 0, rip: 4, rst: 0, rsp: 2047 Flags: N: 0 Z: 0 OF: 0 | Instruction: movo !1 *30
  INFO    machine:command_cycle Tick: 76 | Registers: rax: 72, rbx: 0, rdx: 0, rip: 5, rst: 0, rsp: 2047 Flags: N: 0 Z: 0 OF: 0 | Instruction: add #30 1
  INFO    machine:command_cycle Tick: 80 | Registers: rax: 72, rbx: 0, rdx: 0, rip: 6, rst: 0, rsp: 2047 Flags: N: 0 Z: 0 OF: 0 | Instruction: sub #3 1
  INFO    machine:command_cycle Tick: 82 | Registers: rax: 72, rbx: 0, rdx: 0, rip: 1, rst: 0, rsp: 2047 Flags: N: 0 Z: 0 OF: 0 | Instruction: jnz 1
  INFO    machine:command_cycle Tick: 86 | Registers: rax: 72, rbx: 0, rdx: 0, rip: 2, rst: 0, rsp: 2047 Flags: N: 0 Z: 0 OF: 0 | Instruction: add #5 #2
  INFO    machine:command_cycle Tick: 90 | Registers: rax: 72, rbx: 0, rdx: 0, rip: 3, rst: 0, rsp: 2047 Flags: N: 0 Z: 0 OF: 0 | Instruction: add #5 *30
  INFO    machine:wr_port       OUTPUT: ['H', 'e', 'l', 'l'] <- o
  INFO    machine:command_cycle Tick: 92 | Registers: rax: 72, rbx: 0, rdx: 0, rip: 4, rst: 0, rsp: 2047 Flags: N: 0 Z: 0 OF: 0 | Instruction: movo !1 *30
  INFO    machine:command_cycle Tick: 96 | Registers: rax: 72, rbx: 0, rdx: 0, rip: 5, rst: 0, rsp: 2047 Flags: N: 0 Z: 0 OF: 0 | Instruction: add #30 1
  INFO    machine:command_cycle Tick: 100 | Registers: rax: 72, rbx: 0, rdx: 0, rip: 6, rst: 0, rsp: 2047 Flags: N: 0 Z: 1 OF: 0 | Instruction: sub #3 1
  INFO    machine:command_cycle Tick: 102 | Registers: rax: 72, rbx: 0, rdx: 0, rip: 7, rst: 0, rsp: 2047 Flags: N: 0 Z: 1 OF: 0 | Instruction: jnz 1
  INFO    machine:command_cycle Tick: 103 | Registers: rax: 72, rbx: 0, rdx: 0, rip: 7, rst: 0, rsp: 2047 Flags: N: 0 Z: 1 OF: 0 | Instruction: hlt
  INFO    machine:simulation    output_buffer: 'Hello'
