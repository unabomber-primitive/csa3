section .text
    mov #INT .read_char

    .print_сhar: movo !1 *Question_Position
        add #Question_Position 1
        cmp *Question_Position 0
        jz .input
        jmp .print_сhar

    .input: ei
    .loop: cmp #Char #Stop
        jz .eof
        cmp #Current_len #Buffer_len
        jz .print_answer
        jmp .loop
    .eof: mov *Current_addr 0
        jmp .print_answer

    .read_char: movi #Char !0
        mov *Current_addr #Char
        add #Current_addr 1
        add #Current_len 1
        iret

    .print_answer: di
        
    .print_сhar1: movo !1 *Answer_Position
        add #Answer_Position 1
        cmp *Answer_Position 0
        jz .output
        jmp .print_сhar1
        
    .output: mov #Current_addr #Start_Buffer
    .print_string: movo !1 *Current_addr
        add #Current_addr 1
        cmp *Current_addr 0
        jz .exit
        jmp .print_string
    .exit: hlt